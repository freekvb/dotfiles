#!/usr/bin/env python

"""Update cava config file with colors generated by pywal
"""

import glob
import os
import json
import subprocess
import argparse
import operator

__author__ = "Jean LE QUELLEC"
__copyright__ = "Copyright 2020, PyWal CAVA"
__credits__ = ["Jean LE QUELLEC"]
__license__ = "MIT"
__version__ = "1.0.0"
__maintainer__ = "Jean LE QUELLEC"
__email__ = "Contact via Gitlab"
__status__ = "Production"


def main():

    # Dict of customizable colors in Cava
    # If you want you can change wanted Xcolors here
    custom_colors = {"gradient = ": 1,
                         "gradient_count = ": 4,
                         "background = ": 'color0',
                         "foreground = ": 'color15',
                         "gradient_color_1 = ": 'color1',
                         "gradient_color_2 = ": 'color2',
                         "gradient_color_3 = ": 'color3',
                         "gradient_color_4 = ": 'color4',
                         "gradient_color_5 = ": 'color5',
                         "gradient_color_6 = ": 'color6',
                         "gradient_color_7 = ": 'color7',
                         "gradient_color_8 = ": 'color8'
                         }

    # read command args first
    parser = argparse.ArgumentParser(description="Update CAVA " +
                                                 "config file with colors" +
                                                 "generated from pywal")

    parser.add_argument('-c', '--config', required=True,
                        help="Path to CAVA conf file")

    parser.add_argument('-i', '--input', required=False, metavar='N', type=str, nargs=1,
                        help="Path to pywal json scheme to apply")

    parser.add_argument('-x', '--xrdb', required=False, action='store_true',
                        help="use colors returned by xrdb")

    parser.add_argument('-B', '--background', required=False, action='store_true',
                        help="Set background color")

    parser.add_argument('-F', '--foreground', required=False, action='store_true',
                        help="Set foreground color")

    parser.add_argument('-G', '--gradient', required=False, type=int,
                        help="Number of wanted gradient Max: 8 (if none, no gradient)")

    parser.add_argument('-b', '--backup', required=False, action='store_true',
                        help="Backup CAVA conf file")

    parser.add_argument('-d', '--delete', required=False, action='store_true',
                        help="Delete last generated pywal json")

    # Parse Args
    args = parser.parse_args()

    # Check bad args combination
    if args.input is not None and args.xrdb is True:
        print('You cannot use both as same time pywal JSON will be used')
        args.xrdb = False

    if args.input is not None:
        wal_file = args.input[0]
    elif args.xrdb is False:
        # Get the last pywal generated JSON
        home = os.path.expanduser("~")
        wal_file = max(glob.glob(home + '/.cache/wal/schemes/*'), key=os.path.getctime)

    cava_file = args.config
    nb_gradient = args.gradient

    # Handle unlogical gradien arguments
    if  nb_gradient is None or nb_gradient <= 1:
        nb_gradient = 0
        args.gradient = None
        args.foreground = True

    if nb_gradient > 8:
        nb_gradient = 8

    wanted_colors = {}
    if args.xrdb is False:
        # Open pywal JSON and store it in a Dict
        with open(wal_file, "r") as f:
            wanted_colors = json.load(f)
    else:
        # Use xrdb colors
        x = subprocess.run(['xrdb', '-query'], stdout=subprocess.PIPE)
        lines = x.stdout.decode().split('\n')
        for line in filter(lambda l : l.startswith('*'), lines):
            prop, _, value = line.partition(':\t')
            wanted_colors[prop] = value

    # Check if we need to delete pywal JSON
    if args.delete is True:
        if os.path.exists(wal_file):
            os.remove(wal_file)

    # Open CAVA config file
    # And store it in a list
    conf_fileine = []
    with open(cava_file, "r") as f:
        # Check if we need to backup file
        if args.backup is True:
            with open(cava_file + '.old', "w") as f1:
                for line in f:
                    f1.write(line)
        for line in f:
            conf_fileine.append(line)

    # Find relevant lines
    position_dict = {}
    found_elems = 0
    for elem in custom_colors.keys():
        position = [i for i, s in enumerate(conf_fileine) if elem in s]
        if len(position) > 0:
            position_dict.update({elem: position[0]})
            found_elems += 1

    last_position = position_dict[max(position_dict.items(), key=operator.itemgetter(1))[0]]

    # Add or remove needed gradient_color lines
    # - 4 is cause custom_colors
    # contains 4 other options
    found_elems -= 4
    for key in custom_colors.keys():
        # Need to add line
        if found_elems < nb_gradient:
            if key not in position_dict:
                last_position += 1
                conf_fileine.insert(last_position, key + "\n")
                position_dict.update({key: last_position})
                found_elems += 1
        # Need to remove lines
        elif found_elems > nb_gradient:
            if key in position_dict and 'gradient_color_' in key:
                # 15 is because gradient nb is at index 15 of key string
                if int(key[15]) > nb_gradient:
                    position = [i for i, s in enumerate(conf_fileine) if key in s]
                    del conf_fileine[position[0]]
                    del position_dict[key]
                    found_elems -= 1

    # Replace wanted lines
    for opt, pos in position_dict.items():
        for opt2, Xcolor in custom_colors.items():
            if opt == opt2:
                if args.gradient is None and opt == 'gradient = ':
                    conf_fileine[pos] = "; gradient = 1 \n"
                    break
                if args.gradient is not None and opt == 'gradient = ':
                    conf_fileine[pos] = "gradient = 1 \n"
                    break
                if args.gradient is None and 'gradient_' in opt:
                    conf_fileine[pos] = "; " + opt + "\n"
                    break
                if args.gradient is not None and 'gradient_count' in opt:
                    conf_fileine[pos] = "gradient_count = " + str(args.gradient) + "\n"
                    break
                if args.background is False and 'background' in opt:
                    conf_fileine[pos] = "; " + opt + "\n"
                    break
                if args.foreground is False and 'foreground' in opt:
                    conf_fileine[pos] = "; " + opt + "\n"
                    break
                if args.xrdb is False:
                    conf_fileine[pos] = opt + "\"" + str(wanted_colors['colors'][Xcolor]) + "\"\n"
                else:
                    conf_fileine[pos] = opt + "\"" + str(wanted_colors['*' + Xcolor]) + "\"\n"
    # Save newly created config file
    with open(cava_file, "w") as f3:
        for line in conf_fileine:
            f3.write(line)


if __name__ == "__main__":
    main()
